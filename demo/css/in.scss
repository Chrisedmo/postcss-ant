@ant-gutter 5px; // Set the global gutter. By default it's 30px.

// Badass CSS reset.
* {
  margin: 0;
}

// Using preprocessor loops to make rows of crazily-sized columns with minimal css output. Complete with custom local gutter.
.loopy {
  overflow: hidden; // poor man's clearfix
  margin-bottom: 30px;

  div {
    $gutter: 15px;

    float: left;
    margin: 0 $gutter $gutter 0; // add a gutter to the right and bottom of every element.
    height: 50px;
    background: tomato;

    // Preprocessor loop. $i is the iterator. So the first time through it produces:
    // &:nth-child(6n + 1) {
    //   width: ant(12% 1/4 auto 60px auto 7%, 15px)[1]; // postcss-ant then goes over this and returns a valid CSS length.
    // }
    @for $i from 1 to 6 {
      // Doing `6n + $i` because http://stackoverflow.com/a/37396881
      &:nth-child(6n + $(i)) {
        width: ant(12% 1/4 auto 60px auto 7%, $gutter)[$(i)];
      }
    }

    // Remove the gutter from the end of every 6th element.
    &:nth-child(6n) {
      margin-right: 0;
    }
  }
}

// Simple examples of how to grab particular values from an array of sizes.
// You can easily store the ant array in a variable, but we're not doing that here for explicitness.
// Note the array is NOT 0-based. This is on purpose to make it easier to do the preprocessor loops above.
.simple {
  overflow: hidden;
  margin-bottom: 30px;

  div {
    float: left;
    margin-right: 5px; // sync with global gutter
    background: dodgerblue;

    &:nth-child(1) {
      width: ant(50px 1/3 auto)[1]; // returns 50px

      @media (max-width: 800px) {
        width: ant(200px 1/5 auto)[1]; // returns 200px
      }
    }

    &:nth-child(2) {
      width: ant(50px 1/3 auto)[2]; // returns 1/3 of 100% (container width) minus the fixed sizes (50px from above)

      @media (max-width: 800px) {
        width: ant(200px 1/5 auto)[2]; // returns 1/5 minus fixed sizes and stuff
      }
    }

    &:nth-child(3) {
      width: ant(50px 1/3 auto)[3]; // returns a % length of whatever is leftover

      @media (max-width: 800px) {
        width: ant(200px 1/5 auto)[3]; // returns a % length of whatever is leftover
      }
    }

    &:last-child {
      margin-right: 0; // remove gutter from last element
    }
  }
}

// Flexbox `order` is pretty sweet for source ordering.
.order {
  overflow: hidden;
  margin-bottom: 30px;
  display: flex;
  flex-wrap: wrap;

  div {
    float: left;
    width: ant(1/2)[1]; // If all your elements are the same size, no need to specify more than what you need.
    margin: 0 5px 5px 0;
    background: orange;

    // Remove gutter from end the elements on the right side.
    &:nth-child(odd) {
      margin-right: 0;
    }

    // Easy source ordering.
    &:nth-child(1) {
      order: 4;
    }
    &:nth-child(2) {
      order: 3;
    }
    &:nth-child(3) {
      order: 2;
    }
    &:nth-child(4) {
      order: 1;
    }
  }
}

// Asymmetrical columns
.asymmetrical {
  overflow: hidden;
  margin-bottom: 30px;

  div {
    float: left;
    margin: 0 5px 5px 0;
    background: olivedrab;

    // That preprocessor loop from above...
    @for $i from 1 to 7 {
      &:nth-child(7n + $(i)) {
        // Iterator as numerators. Then add all those (1 + 2 + 3 + 4 + 5 + 6 + 7) to get the denominator (28).
        width: ant($(i)/28)[1];
      }
    }

    // Irregular asymmetrical elements.
    &:nth-child(11) {
      // 4 + 5 + 6
      width: ant(15/28)[1];
      background: thistle;
    }

    &:nth-child(13) {
      // 7 - 5
      width: ant(2/28)[1];
      background: peachpuff;
    }

    // Remove right gutter.
    &:nth-child(7),
    &:nth-child(13) {
      margin-right: 0;
    }
  }
}

// Heights. You need to set the container to a fixed height. Sidenote: 100vh counts as a fixed height.
.heights {
  height: 300px;
  margin-bottom: 30px;

  div {
    margin-bottom: 5px; // Don't forget the global gutter.
    background: hotpink;

    &:last-child {
      margin-bottom: 0; // Remove superfluous bottom gutter.
    }

    // We can stash the sizes array in a variable if you'd like.
    $local-array: 100px auto 1/4;

    &:nth-child(1) {
      height: ant($local-array)[1];
    }

    &:nth-child(2) {
      height: ant($local-array)[2];
    }

    &:nth-child(3) {
      height: ant($local-array)[3];
    }
  }
}
